package com.datn.viettech_md_12.screen.profile_detail

import android.app.Application
import android.widget.Toast
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.Divider
import androidx.compose.material.RadioButtonDefaults
import androidx.compose.material.Text
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.RateReview
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.RadioButton
import androidx.compose.material3.RadioButtonColors
import androidx.compose.material3.TextButton

import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Devices
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import coil.compose.AsyncImage
import com.datn.viettech_md_12.NetworkHelper
import com.datn.viettech_md_12.utils.ProductViewModelFactory
import com.datn.viettech_md_12.R
import com.datn.viettech_md_12.component.review_component.AddReviewDialog
import com.datn.viettech_md_12.viewmodel.ProductViewModel
import com.datn.viettech_md_12.viewmodel.ReviewViewModel
import com.datn.viettech_md_12.viewmodel.ReviewViewModelFactory
import java.text.NumberFormat
import java.util.Locale


@Composable
fun OrderDetailScreen(
    orderId: String,
    navController: NavController,
    viewModel: ProductViewModel = viewModel(
        factory = ProductViewModelFactory(
            NetworkHelper(LocalContext.current)
        )
    )
) {
    val context = LocalContext.current.applicationContext as Application
    val networkHelper = NetworkHelper(LocalContext.current)
    val formatter = NumberFormat.getCurrencyInstance(Locale("vi", "VN"))
    val order by viewModel.selectedOrder.collectAsState()
    val BASE_URL = "http://103.166.184.249:3056/"
    // Thay v√¨ d√πng boolean, d√πng productId ƒë·ªÉ x√°c ƒë·ªãnh s·∫£n ph·∫©m c·∫ßn ƒë√°nh gi√°
    // Kh·ªüi t·∫°o tr·∫°ng th√°i s·∫£n ph·∫©m ƒë√£ review hay ch∆∞a
    // Kh·ªüi t·∫°o tr·∫°ng th√°i s·∫£n ph·∫©m ƒë√£ review hay ch∆∞a
    var selectedProductId by remember { mutableStateOf<String?>(null) }

    // Kh·ªüi t·∫°o ReviewViewModel v·ªõi factory
    val reviewViewModel: ReviewViewModel = viewModel(
        factory = ReviewViewModelFactory(context, networkHelper)
    )
    var showCancelDialog by remember { mutableStateOf(false) }
    var selectedReason by remember { mutableStateOf<String?>(null) }
    val cancelReasons = listOf(
        "ƒê·∫∑t nh·∫ßm s·∫£n ph·∫©m",
        "Mu·ªën thay ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng",
        "T√¨m ƒë∆∞·ª£c gi√° t·ªët h∆°n",
        "Kh√¥ng c√≤n nhu c·∫ßu n·ªØa",
        "L√Ω do kh√°c"
    )
    LaunchedEffect(orderId) {
        viewModel.getOrderById(context, orderId)
    }
    Column(
        Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .background(Color(0xFFF5F5F5))
    ) {
        Spacer(modifier = Modifier.height(10.dp))
        Row(verticalAlignment = Alignment.CenterVertically) {
            IconButton(onClick = {
                navController.popBackStack()
            }) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = null,
                    modifier = Modifier.size(32.dp),
                    tint = Color.Black
                )
            }
            Text(
                text = stringResource(R.string.order_infomation),
                color = Color.Black,
                fontWeight = FontWeight.Bold,
                fontSize = 20.sp
            )
        }

        order?.let { currentOrder ->
            Card(
                modifier = Modifier
                    .padding(12.dp)
                    .fillMaxWidth(),
                shape = RoundedCornerShape(12.dp),
                elevation = CardDefaults.cardElevation(4.dp)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(Color.White)
                ) {
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(Color(0xFF21D4B4))
                            .padding(16.dp)
                    ) {
                        Text(
                            text = translateOrderStatus(currentOrder.status ?: ""),
                            color = Color.White,
                            fontWeight = FontWeight.Bold,
                            fontSize = 16.sp
                        )
                    }

                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(
                            text = "Th√¥ng tin v·∫≠n chuy·ªÉn",
                            fontWeight = FontWeight.SemiBold,
                            fontSize = 14.sp,
                            color = Color.Black
                        )
                        Spacer(modifier = Modifier.height(4.dp))
                        Text(
                            text = "SPX Express: SPXVN04485138241B",
                            fontSize = 13.sp,
                            color = Color.Black
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Row(verticalAlignment = Alignment.CenterVertically) {
                            Text(text = "üöö", fontSize = 14.sp)
                            Spacer(modifier = Modifier.width(6.dp))
                            Column {
//                                Text(
//                                    text = currentOrder.status ?: "",
//                                    color = Color(0xFF1ABF79),
//                                    fontSize = 14.sp
//                                )
                                Text(
                                    text = "${currentOrder.createdAt ?: ""} - ${currentOrder.updatedAt ?: ""}",
                                    fontSize = 13.sp,
                                    color = Color.Black
                                )
                            }
                        }
                    }

                    Divider(color = Color.LightGray, thickness = 1.dp)

                    Column(modifier = Modifier.padding(16.dp)) {
                        Text(
                            text = "ƒê·ªãa ch·ªâ nh·∫≠n h√†ng",
                            fontWeight = FontWeight.SemiBold,
                            fontSize = 14.sp,
                            color = Color.Black
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Row {
                            Text(text = "üìç", fontSize = 14.sp)
                            Spacer(modifier = Modifier.width(6.dp))
                            Column {
                                Text(
                                    text = "${currentOrder.receiver_name ?: ""} - ${currentOrder.phone_number ?: ""}",
                                    fontSize = 14.sp,
                                    color = Color.Black
                                )
                                Text(
                                    text = currentOrder.address ?: "",
                                    fontSize = 13.sp,
                                    color = Color.Black
                                )
                            }
                        }
                    }
                }
            }

            // S·∫£n ph·∫©m
            Card(
                modifier = Modifier.padding(12.dp),
                shape = RoundedCornerShape(8.dp),
                elevation = CardDefaults.cardElevation(4.dp)
            ) {
                Column(Modifier.background(Color.White)) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(12.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Box(
                            modifier = Modifier
                                .background(Color.Red, shape = RoundedCornerShape(4.dp))
                                .padding(horizontal = 6.dp, vertical = 2.dp)
                        ) {
                            Text("Y√™u th√≠ch", color = Color.White, fontSize = 10.sp)
                        }
                        Spacer(Modifier.width(6.dp))
                        Text(
                            "VietTech",
                            fontWeight = FontWeight.SemiBold,
                            fontSize = 14.sp,
                            color = Color.Black
                        )
                    }

                    Divider()
                    selectedProductId?.let { productId ->
                        AddReviewDialog(
                            productId = productId,
                            billId = orderId,
                            reviewViewModel = reviewViewModel,
                            navController = navController,
                            onDismiss = {
                                selectedProductId = null
                            },
                            onReviewSubmitted = {
                                selectedProductId = null // ƒê√≥ng dialog sau khi review
                                reviewViewModel.getReviewsByAccount() // <- üî• Reload l·∫°i danh s√°ch review m·ªõi nh·∫•t
                            }
                        )
                    }

                    //hien thi nhieu anh don hang
                    currentOrder.products?.forEach { product ->
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(12.dp)
                                .clickable {
                                    // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh chi ti·∫øt s·∫£n ph·∫©m khi nh·∫•n v√†o row n√†y
                                    navController.navigate("product_detail/${product.productId}")
                                },
                        ) {
                            AsyncImage(
                                model = "$BASE_URL${product.image}",
                                contentDescription = null,
                                modifier = Modifier
                                    .height(80.dp)
                                    .width(80.dp)
                                    .background(Color.LightGray, RoundedCornerShape(8.dp))
                            )

                            Spacer(Modifier.width(12.dp))

                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = product.name ?: "",
                                    fontWeight = FontWeight.Medium,
                                    fontSize = 14.sp,
                                    maxLines = 1,
                                    overflow = TextOverflow.Ellipsis,
                                    color = Color.Black
                                )
                                Spacer(Modifier.height(6.dp))
                                Text(
                                    text = "x${product.quantity}",
                                    fontSize = 13.sp,
                                    color = Color.Black
                                )
                            }

                            Text(
                                text = formatter.format(product.price ?: 0.0),
                                fontWeight = FontWeight.Medium,
                                fontSize = 14.sp
                            )
                        }
                        if (currentOrder.status?.lowercase() == "completed") {
                            // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° ch∆∞a
                            val hasReviewed =
                                reviewViewModel.checkReviewExists(orderId, product.productId)

                            // N·∫øu s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°, hi·ªÉn th·ªã n√∫t "Th√™m ƒë√°nh gi√°"
                            if (!hasReviewed) {
                                ReviewButton {
                                    selectedProductId = product.productId
                                }
                            }
                        }

                        Divider()
                    }


                    Divider()

                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(12.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text("Th√†nh ti·ªÅn:", fontSize = 14.sp, color = Color.Black)
                        Text(
                            formatter.format(currentOrder.total ?: 0.0),
                            fontWeight = FontWeight.Bold,
                            fontSize = 16.sp, color = Color.Black
                        )
                    }
                }
            }

            // H·ªó tr·ª£
            Card(
                modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),
                shape = RoundedCornerShape(8.dp), elevation = CardDefaults.cardElevation(4.dp)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(Color.White)
                ) {
                    Column(Modifier.padding(16.dp)) {
                        Text(
                            "B·∫°n c·∫ßn h·ªó tr·ª£?",
                            fontWeight = FontWeight.Bold,
                            fontSize = 14.sp,
                            color = Color.Black
                        )
                        Spacer(Modifier.height(12.dp))
                        Text(
                            "‚Ä¢ G·ª≠i y√™u c·∫ßu Tr·∫£ h√†ng/Ho√†n ti·ªÅn",
                            fontSize = 13.sp,
                            color = Color.Black
                        )
                        Spacer(Modifier.height(4.dp))
                        Text("‚Ä¢ Li√™n h·ªá Shop", fontSize = 13.sp, color = Color.Black)
                        Spacer(Modifier.height(4.dp))
                        Text("‚Ä¢ Trung t√¢m h·ªó tr·ª£", fontSize = 13.sp, color = Color.Black)
                    }
                }
            }

            // M√£ ƒë∆°n h√†ng
            Card(
                modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),
                shape = RoundedCornerShape(8.dp), elevation = CardDefaults.cardElevation(4.dp)
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(Color.White)
                ) {
                    Column(Modifier.padding(16.dp)) {
                        Text(
                            "M√£ ƒë∆°n h√†ng: ${currentOrder.order_code ?: ""}",
                            fontSize = 13.sp,
                            color = Color.Black
                        )
                    }
                }
            }

            Spacer(Modifier.height(20.dp))

            Row(
                Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 12.dp),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                if (currentOrder.status == "completed") {
                    OutlinedButton(
                        onClick = { navController.navigate("review_screen") },
                        modifier = Modifier
                            .weight(1f)
                            .padding(end = 6.dp)
                    ) {
                        Text("Qu·∫£n L√Ω ƒê√°nh Gi√°")
                    }
                }
                if (currentOrder.status == "pending") {
                    Button(
                        onClick = {
//                            viewModel.cancelOrder(context, currentOrder._id)
                            showCancelDialog = true
                        },
                        modifier = Modifier
                            .weight(1f)
                            .padding(start = 6.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color.White,
                            contentColor = Color.Red
                        ),
                        border = BorderStroke(1.dp, Color.Red)
                    ) {
                        Text("Hu·ª∑ ƒë∆°n h√†ng", color = Color.Red)
                    }
                    val cancelResult by viewModel.cancelResult.collectAsState()
                    cancelResult?.let { success ->
                        if (success) {
//                            Toast.makeText(context, "ƒê√£ hu·ª∑ ƒë∆°n h√†ng", Toast.LENGTH_SHORT).show()
                            navController.popBackStack()
                        } else {
//                            Toast.makeText(context, "Kh√¥ng th·ªÉ hu·ª∑ ƒë∆°n h√†ng", Toast.LENGTH_SHORT).show()
                        }
                        // Reset l·∫°i tr·∫°ng th√°i ƒë·ªÉ tr√°nh l·∫∑p l·∫°i th√¥ng b√°o
                        viewModel.resetCancelResult()
                    }
                }

            }
            if (showCancelDialog) {
                AlertDialog(
                    onDismissRequest = { showCancelDialog = false },
                    title = {
                        Text("Ch·ªçn l√Ω do h·ªßy ƒë∆°n h√†ng", fontWeight = FontWeight.Bold)
                    },
                    text = {
                        Column {
                            cancelReasons.forEach { reason ->
                                Row(
                                    verticalAlignment = Alignment.CenterVertically,
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .clickable { selectedReason = reason }
                                        .padding(vertical = 6.dp)
                                ) {
                                    RadioButton(
                                        selected = selectedReason == reason,
                                        onClick = { selectedReason = reason }
                                    )
                                    Text(reason)
                                }
                            }
                        }
                    },
                    confirmButton = {
                        TextButton(
                            onClick = {
                                if (selectedReason != null) {
                                    viewModel.cancelOrder(context, currentOrder._id)
                                    showCancelDialog = false
                                    Toast.makeText(
                                        context,
                                        "ƒê√£ hu·ª∑ ƒë∆°n h√†ng v·ªõi l√Ω do: $selectedReason",
                                        Toast.LENGTH_SHORT
                                    ).show()
                                    navController.popBackStack()
                                }
                            }
                        ) {
                            Text("X√°c nh·∫≠n")
                        }
                    },
                    dismissButton = {
                        TextButton(onClick = { showCancelDialog = false }) {
                            Text("H·ªßy")
                        }
                    }
                )
            }

            Spacer(Modifier.height(24.dp))
        }
    }
}

fun translateOrderStatus(status: String?): String {
    return when (status?.lowercase()) {
        "pending" -> "ƒêang ch·ªù x·ª≠ l√Ω"
        "active" -> "ƒêang giao h√†ng"
        "cancelled" -> "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy"
        "completed" -> "ƒê∆°n h√†ng ho√†n t·∫•t"
        else -> "Kh√¥ng x√°c ƒë·ªãnh"
    }
}


@Preview(showBackground = true, showSystemUi = true, device = Devices.PIXEL_7)
@Composable
fun Detail() {
//    OrderDetailScreen()
}

@Composable
fun ReviewButton(onClick: () -> Unit) {
    OutlinedButton(
        onClick = onClick,
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 4.dp),
        shape = RoundedCornerShape(20.dp),
        border = BorderStroke(1.dp, Color(0xFF43A047)), // M√†u xanh l√° nh·∫π
        colors = ButtonDefaults.outlinedButtonColors(
            contentColor = Color(0xFF43A047) // Text & icon m√†u xanh l√°
        )
    ) {
        Icon(
            imageVector = Icons.Default.RateReview,
            contentDescription = null,
            modifier = Modifier.size(18.dp)
        )
        Spacer(modifier = Modifier.width(6.dp))
        Text(
            text = "Th√™m ƒë√°nh gi√°",
            fontSize = 14.sp,
            fontWeight = FontWeight.Medium
        )
    }
}
